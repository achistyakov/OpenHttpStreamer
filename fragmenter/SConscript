import os, pickle, os.path

def lib_check(env, lib_list):
	checked_libs = []
	chk_lib_list = lib_list[:]
	if os.path.exists(".used_libs"):
		fd = open(".used_libs", "r")
		checked_libs = pickle.load(fd)
		fd.close()
		for checked_lib in checked_libs:
			if checked_lib in chk_lib_list:
				chk_lib_list.remove(checked_lib)
		
	if chk_lib_list != []:
		print "Start checking necessary library files..."
		for lib in chk_lib_list:
			if not chk_conf.CheckLib(lib):
				print lib, " not found. Exiting"
				return False
             
    	print "All necessary libraries present"
    
    	checked_libs.extend(chk_lib_list)
    	fd = open(".used_libs", "w")
    	pickle.dump(checked_libs, fd)
    	fd.close()
    
	return True

Import('env')
Import('config')

def boost_lib(*name):
	if "thread" in name and "date_time" not in name:
		name.append("date_time")
   
	lib_list = ["boost_" + n + config.get('boost_lib_suffix', '') for n in name]
	if not lib_check(mp4env, lib_list):
		Exit(1)
		
	return lib_list


print COMMAND_LINE_TARGETS
mp4env = env.Clone()
chk_conf = Configure(mp4env) 
mp4env.Append(LIBS = boost_lib('program_options', "system"))
mp4frag = mp4env.Program('mp4frag', [ 'mp4frag.cc', 'mp4.cc', 'base64.cc' ] )

#print "Installing mp4dump to ", config["prefix"]
mp4env.Install(config["prefix"], mp4frag)
mp4env.Alias('install', config["prefix"])
