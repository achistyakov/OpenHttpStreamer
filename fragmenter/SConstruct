"""
Usage:

    scons
    scons build=release,profile
    scons build=all

    etc.
"""

import os, pickle
from utils import suffix_check, header_check, compiler_check

def save_config(config):
    fd = open(".config", "w")
    pickle.dump(config, fd)
    fd.close()

try:
    assert "configure" not in COMMAND_LINE_TARGETS
    fd = open(".config")
    config = pickle.load(fd)
    fd.close()

except:
	env = {}

	if os.getenv("CXX"):
		env['CXX'] = os.getenv("CXX")
	else:
		env['CXX'] = compiler_check()

	env['CPPPATH'] = filter(None, ARGUMENTS.get("includes", "").split(","))
	env['CPPPATH'].append("libutility")
		
	if not header_check("/home/artint/Projects/CPP/videocycle/fragmenter", env, env['CPPPATH'], ["", "/libutility/utility/src"]):
	#if not header_check("#", env, "):
		print "Problems. Build stopped"
		Exit(1)
	
	
	env['LIBPATH'] = filter(None, ARGUMENTS.get("libpath", "").split(","))

	boost_lib_suffix = ARGUMENTS.get("boost-suffix", "")
	if not boost_lib_suffix:
		boost_lib_suffix = suffix_check(env)
    
	prefix = ARGUMENTS.get("prefix", ".")

	config = {'env': dict(filter(lambda _: _[1], env.items())), 
              'prefix': prefix, 
              'boost_lib_suffix': boost_lib_suffix}
	save_config(config)

if "printconf" in COMMAND_LINE_TARGETS or "configure" in COMMAND_LINE_TARGETS:
    import pprint
    pprint.pprint(config)
    Exit(0)

targets = {
    "release":   Environment(
		LIBPATH=['/usr/local/lib'], 
        CXXFLAGS = ["-O6"], 
        CPPDEFINES = {'DEBUG': 1, 'WITH_STOPPER': 1, 'NO_THRIFT':1}, 
        ),
    "debug":   Environment(
		LIBPATH=['/usr/local/lib'], 
        CXXFLAGS = ["-O0", "-g", "-fkeep-inline-functions", "-fmerge-all-constants"], 
        CPPDEFINES = {'DEBUG': 1, 'WITH_STOPPER': 1, 'NO_THRIFT':1}, 
        ),
}

try:
    variants = ARGUMENTS["build"]
except KeyError:
    try:
        variants = config["build"]
    except KeyError:
        variants = "release"

if not config.get("build", "") == variants:
    config["build"] = variants
    save_config(config)

if "prefix" in ARGUMENTS:
    config["prefix"] = ARGUMENTS["prefix"]
else:
	config["prefix"] = "/usr/local/bin"
	
save_config(config)

	

if variants == 'all':
    variants = targets.keys()
else:
    variants = [x for x in variants.split(',') if x in targets]

target_prog = ARGUMENTS.get("program", "all")

for key in variants:
    dir = "." + key
    env = targets[key]
    env.Append(CPPDEFINES = {
                   'BOOST_SP_USE_QUICK_ALLOCATOR': 1,
               },
               CXXFLAGS = ['-Woverloaded-virtual', '-Wall', '-std=c++0x'],
              )
    for key, value in config['env'].items():
        if type(value) == type([]):
            env.Append(**{key: value})
        else:
            env[key] = value
            
    Export('env')
    Export('config')
    SConscript('SConscript', build_dir = dir)
