import os, os.path
from os.path import walk
import re

#env = Environment()
#conf = Configure(env)

def check_headers(headers, cpp):
	
	for header in headers:
		print "Checking header ", header, "..."
		
		if cpp:
			checker = chk_conf.CheckCXXHeader
		else:
			checker = chk_conf.CheckCHeader 
		if not checker(header):
			print header, " not found. Exiting"
			Exit(1)
		else:
			print "Checking header ", header, " OK"

def check_std_types(types):
	for type in types:
		print "Checking type ", type, "..."
		if not chk_conf.CheckType(type):
			print type, " not found. Exiting"
			Exit(1)
		else:
			print "Checking type ", type, " OK"         

def check_boost():
	name_com = re.compile(".\.(c|cc|cpp|h|hh)$")
	boost_com = re.compile("\#include[ \t]*\<(boost/.*?)\>")
	boost_headers_dic = {}
	
	def visit(arg, dirname, names):
		global boost_headers
		for name in names:
			if name_com.search(name):
				f = open(dirname + "/" + name)
				s = f.readline()
				while s:
					boost_inc = boost_com.search(s)
					if boost_inc:
						boost_headers_dic[boost_inc.group(1)] = True
					s = f.readline()

	walk("/home/artint/Projects/CPP/videocycle", visit, [])
	boost_headers = []
	for boost_header in boost_headers_dic.keys():
		boost_headers.append(boost_header)
	
	check_headers(boost_headers, True)	
 

	libpath = ["/lib", "/usr/lib"]
	if os.getenv("LD_LIBRARY_PATH"):
		libpath.append(os.getenv("LD_LIBRARY_PATH"))
		
	if env.has_key("LIBPATH"):
		libpath.extend(env["LIBPATH"])
	
	ldsoconf = os.listdir("/etc/ld.so.conf.d")
	for libdir in ldsoconf:
		f = open("/etc/ld.so.conf.d/" + libdir)
		for s in f.readlines():
			libpath.append(s)

	f = open("/etc/ld.so.conf")
	s = f.readline()
	for s in f.readlines():
		if s and s.find("#") == -1:
			libpath.append(s)
		
	boost_mask = re.compile("libboost_\w*(\-[\w\-]*?).so")
	global boost_lib_suffix
	boost_lib_suffix = ""	
	min_fn = ""
	for libdir in libpath:
		if os.path.exists(libdir):
			file_list = os.listdir(libdir)
			for name in file_list:
				boost_fnd = boost_mask.search(name)
				if boost_fnd and (not boost_lib_suffix or (boost_lib_suffix and len(boost_lib_suffix) > len(boost_fnd.group(1)))):
					boost_lib_suffix = boost_fnd.group(1)
			
			if boost_lib_suffix:
				break
					
	print "boost_lib_suffix is ", boost_lib_suffix
		

def basic_check():
	print "Calling autoscan to get basic dependencies"
	if ARGUMENTS.has_key("autoscan_path"):
		s_auto = ARGUMENTS["autoscan_path"]
	else:
		#s_auto = "/usr/bin/autoscan"
	
		#AC_PROG_CXX
		#check for compiler
		if os.getenv("CXX"):
			env['CXX'] = os.getenv("CXX")
		elif os.getenv("CCC"):
			env['CXX'] = os.getenv("CCC")
		
		for ac_prog in ["g++", "c++", "gpp", "aCC", "CC", "cxx" "cc++"]:# too exotic cl.exe FCC KCC RCC xlC_r xlC:
			if os.system("which " + ac_prog) != 256:
				print "Using compiler ", ac_prog
				env['CXX'] = ac_prog
				break	
			else:
				print "No suitable compiler found. Exiting"
				Exit(1)
		
		check_headers(["arpa/inet.h", "fcntl.h", "limits.h", "memory.h", "netdb.h", "netinet/in.h", "stdint.h", "stdlib.h", "string.h", "sys/ioctl.h", "sys/socket.h", "sys/time.h", "unistd.h"], False)
		check_std_types(["off_t", "size_t", "uint16_t", "uint32_t", "uint64_t"], "#include <stdint.h>")
		#check_std_types(["size_t", "uint16_t", "uint32_t", "uint64_t"])
		
	
try:
    assert "configure" not in COMMAND_LINE_TARGETS
    fd = open(".config")
    config = pickle.load(fd)
    fd.close()

except:
	pass
	
targets = {
    "release":   Environment(
		LIBPATH=['/usr/local/lib'], 
        CXXFLAGS = ["-O6"], 
        CPPDEFINES = {'DEBUG': 1, 'WITH_STOPPER': 1, 'NO_THRIFT':1}, 
        ),
    "debug":   Environment(
		LIBPATH=['/usr/local/lib'], 
        CXXFLAGS = ["-O0", "-g", "-fkeep-inline-functions", "-fmerge-all-constants"], 
        CPPDEFINES = {'DEBUG': 1, 'WITH_STOPPER': 1, 'NO_THRIFT':1}, 
        ),
}

try:
    variants = ARGUMENTS["target"]
except KeyError:
	try:
		variants = config["target"]
	except KeyError:
		variants = "debug"
	except NameError:
		variants = "debug"
        
#if not config.get("target", "") == variants:
#    config["target"] = variants
#    save_config(config)

if "prefix" in ARGUMENTS:
    config["prefix"] = ARGUMENTS["prefix"]
    save_config(config)

if variants == 'all':
    variants = targets.keys()
else:
    variants = [x for x in variants.split(',') if x in targets]

target_prog = ARGUMENTS.get("program", "all")

for key in variants:
	dir = "." + key
	env = targets[key]
    
	env.Append(CPPDEFINES = {'BOOST_SP_USE_QUICK_ALLOCATOR': 1})
	env.Append(CXXFLAGS = ['-Woverloaded-virtual', '-Wall', '-std=c++0x'])
	env.Append(CPPPATH = ARGUMENTS.get("includes", "").split(","))
	env.Append(LIBPATH = ARGUMENTS.get("libpath", "").split(","))
              
#	for key, value in config['env'].items():
#		if type(value) == type([]):
#			env.Append(**{key: value})
#		else:
#			env[key] = value
            
	prefix = ARGUMENTS.get("prefix", ".")

	config = {
#	'env': dict(filter(lambda _: _[1], env.items())), 
              'prefix': prefix, 
#              'boost_lib_suffix': boost_lib_suffix
	}
              
#	save_config(config)

	chk_conf = Configure(env)
	basic_check()
	check_boost()

	Export('env')
	Export('config')
	Export("chk_conf")
	SConscript('SConscript', build_dir = dir)  