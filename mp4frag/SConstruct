"""
Usage:

    scons
    scons build=release,profile
    scons build=all

    etc.
"""

import os, pickle
from utils import suffix_check, compiler_ver_check, boost_ver_check, lib_check, checkEndian


def save_config(filename, config):
    fd = open(filename, "w")
    pickle.dump(config, fd)
    fd.close()

def load_config(filename):
	fd = open(filename, "r")
	config = pickle.load(fd)
	fd.close()
	return config

DEFAULT_TARGET = "release"
ENV_SETPARAMS = ["CXXFLAGS", "CPPDEFINES", "LINKFLAGS", "CPPPATH", "LIBPATH", "CXX", "LIBS"]   
TARGETS = {
    "release":   Environment(
        CXXFLAGS = ["-O6"], 
        ),
    "debug":   Environment(
        CXXFLAGS = ["-O0", "-g", "-fkeep-inline-functions"], 
        ),
    "profile": Environment(
        CXXFLAGS = ["-O6", "-g", "-pg"],
        ),
}

FRAG_BOOST_LIBS_USED = ['program_options', "system", "filesystem"]
UTIL_BOOST_LIBS_USED = ['date_time', "thread"]
SRC_LIST = [ 'mp4frag_main.cc', 'mp4frag.cc', 'mp4.cc', 'base64.cc', 'serialize.cc', 'mapping.cc' ]

if ARGUMENTS.has_key("build"):
	if ARGUMENTS["build"] == 'all':
		variants = TARGETS.keys()
	else:
		variants = [variant for variant in ARGUMENTS["build"].split(",") if variant in TARGETS]
else:
	variants = [DEFAULT_TARGET]
	 
if ARGUMENTS.has_key("lubuild"):
	luvariants = [variant for variant in ARGUMENTS["lubuild"].split(",") if variant in TARGETS]
else:
	luvariants = variants

def frag_build(env, build_dir, prefix, need_install):
	VariantDir(build_dir, ".")
	cur_src_list = [build_dir + "/" + src for src in SRC_LIST]
	mp4frag = env.Program(build_dir + "/mp4frag", cur_src_list )
	env.Alias('install', prefix)
	
	if need_install:	
		env.Install(prefix, mp4frag)

def util_build(env, build_dir, prefix, need_install):
	libsuffix = "lib"
	builddir = "libutility/" + build_dir
	libbuilddir = os.path.join(builddir, libsuffix)
	Export('env')
	SConscript("libutility/utility/src/SConscript", variant_dir = libbuilddir)
	#if "examples" in COMMAND_LINE_TARGETS:
	#	SConscript("libutility/examples/SConscript", variant_dir = builddir )
	

def util_extra_init(variant, env, libs_used):
	backend = ARGUMENTS.get("backend", "libevent")
	if backend == "libevent":
		libs_used.append('event'),
		env.Append(CPPDEFINES = {"LIBEVENT_REACTOR": 1})
	else:
		env.Append(CPPDEFINES = {"EPOLL_REACTOR": 1})
	
	if variant == "profile" or variant == "release":
		env.Append(CPPDEFINES = {'NDEBUG': 1})

	if variant == "profile" or variant == "debug":
		env.Append(CPPDEFINES = {'DEBUG': 1, 'WITH_STOPPER': 1})
		env.Append(LINKFLAGS = ["-pg"])
	if variant == "release":
		env.Append(CXXFLAGS = ["-fomit-frame-pointer"])
	
	env.Append(CPPPATH = "#/libutility")
	env.Append(CXXFLAGS = ['-pipe', '-Werror', '-Wno-deprecated', '-std=c++0x'])

def frag_extra_init(variant, env, libs_used):
	env.Append(CPPDEFINES = {'DEBUG': 1, 'NO_THRIFT':1, 'WITH_STOPPER': 1})
	env.Append(CXXFLAGS = ["-fmerge-all-constants"])

def prepare_boost_libs(env, libs_used):
    libpath = ["/lib", "/usr/lib"]
    if os.getenv("LD_LIBRARY_PATH"):
        libpath.append(os.getenv("LD_LIBRARY_PATH"))
        
    if env.has_key("LIBPATH"):
        libpath.extend(env["LIBPATH"])
        
    suffix_check(libpath, libs_used)

configures = {}

def rename_this_function(variants, config_prefix, subroutines, compiler_ver, boost_libs_used, libs_used):
	need_install = True
	for variant in variants:
		dir = "." + variant
		try:
			assert "configure" not in COMMAND_LINE_TARGETS
			dump_config = load_config(config_prefix + dir)
			env = Environment()
			for key in ENV_SETPARAMS:#, val in env.Dictionary().items():
				env[key] = dump_config["env"][key]
			prefix = dump_config["prefix"]
		except:
			env = TARGETS[variant]
			env.Append(CPPPATH = filter(None, ARGUMENTS.get("includes", "").split(",")))
			env.Append(CPPPATH = "libutility")
			
			env.Append(LIBPATH = filter(None, ARGUMENTS.get("libpath", "").split(",")))
			env.Append(CPPDEFINES = {'BOOST_SP_USE_QUICK_ALLOCATOR': 1,})
			env.Append(CXXFLAGS = ['-Woverloaded-virtual', '-Wall'])
			env.Append(LIBPATH = '/usr/local/lib')
			
			if "prefix" in ARGUMENTS:
				prefix = ARGUMENTS["prefix"]
			else:
				prefix = "/usr/local/bin"
	    
            
			chk_conf = Configure(env, custom_tests = 
	    		{
	    		 "boost_ver_check" : boost_ver_check, 
	    		 "checkEndian" :  checkEndian, 
	    		 "compiler_ver_check" : compiler_ver_check,
	    		 "lib_check" : lib_check,
	    		}
	    	)
	
			cur_libs_used = libs_used[:]
			if subroutines.has_key("extra_init"):
				extra_init = subroutines["extra_init"]
				extra_init(variant, env, cur_libs_used)
				
			cur_boost_libs_used = boost_libs_used[:]
			prepare_boost_libs(env, cur_boost_libs_used)
			cur_libs_used.extend(cur_boost_libs_used)
				
			if ARGUMENTS.has_key("compiler"):
				chk_conf.env['CXX'] = ARGUMENTS["compiler"]
			elif os.getenv("CXX"):
				chk_conf.env['CXX'] = os.getenv("CXX")
			else:
				chk_conf.env["CXX"] = "g++"
			
			#print env["CXXVERISON"]
			if not chk_conf.CheckCXX() or not chk_conf.compiler_ver_check(chk_conf.env["CXX"], compiler_ver):
				Exit(1)
	    	
			endian = chk_conf.checkEndian() # look at AC_C_BIGENDIAN on this wiki
			if endian == "little":
				chk_conf.env.Append(CPPDEFINES = {'LITTLE_ENDIAN': 1})	
			elif endian == "big":
				chk_conf.env.Append(CPPDEFINES = {'BIG_ENDIAN': 1})
	     	
			if not chk_conf.boost_ver_check("1.39.0"):
				Exit(1)
			
			if not lib_check(chk_conf, cur_libs_used):
				Exit(1)
				
			chk_conf.env["LIBS"] = cur_libs_used
            
			env = chk_conf.Finish()
			dump_env = {}
			for key in ENV_SETPARAMS:
				dump_env[key] = env.Dictionary()[key]
 
				
			save_config(config_prefix + dir, {"env" : dump_env, "prefix" : prefix})
			#print "Configured"
        
		if "printconf" in COMMAND_LINE_TARGETS or "configure" in COMMAND_LINE_TARGETS:
			print "Dumping configure:"
			for key in ENV_SETPARAMS:
				print key, "=", env.Dictionary()[key]
 
			continue
     
		build = subroutines["build"]
		configures[config_prefix + variant] = env.Clone()
		build(configures[config_prefix + variant], "." + variant, prefix, need_install) 
		need_install = False

frag_subroutines = {"extra_init" : frag_extra_init, "build" : frag_build}
print "Processing mp4fragmenter"
rename_this_function(variants, ".config", frag_subroutines, "4.1.0", FRAG_BOOST_LIBS_USED[:], [])

print "Processing libutility"
if os.path.exists("libutility"):
	util_subroutines = {"extra_init" : util_extra_init, "build" : util_build}
	rename_this_function(luvariants, ".luconfig", util_subroutines, "4.3.0", UTIL_BOOST_LIBS_USED[:], [])

if "printconf" in COMMAND_LINE_TARGETS or "configure" in COMMAND_LINE_TARGETS:
	Exit(0)
#os.remove("config.log")
