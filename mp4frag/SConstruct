"""
Usage:

    scons
    scons build=release,profile
    scons build=all

    etc.
"""

import os, pickle
from utils import suffix_check, compiler_check, boost_ver_check, lib_check


def save_config(config):
    fd = open(".config", "w")
    pickle.dump(config, fd)
    fd.close()

LIBS_USED = ['program_options', "system"]
SRC_LIST = [ 'mp4frag.cc', 'mp4.cc', 'base64.cc' ]

#SetOption('clean', "-c")
#if "clean" in COMMAND_LINE_TARGETS:
#	SetOption('clean', "-c")
#	COMMAND_LINE_TARGETS.remove("clean")
#	BUILD_TARGETS.remove("clean")
	#Exit(0)
	
def boost_lib(name):
	if "thread" in name and "date_time" not in name:
		name.append("date_time")
   
	lib_list = ["boost_" + n + config.get('boost_lib_suffix', '') for n in name]
	return lib_list

try:
    assert "configure" not in COMMAND_LINE_TARGETS
    fd = open(".config")
    config = pickle.load(fd)
    fd.close()

except:

	env = {}

	env['CPPPATH'] = filter(None, ARGUMENTS.get("includes", "").split(","))
	env['CPPPATH'].append("libutility")
	env['LIBPATH'] = filter(None, ARGUMENTS.get("libpath", "").split(","))
	env["CPPDEFINES"] = {'BOOST_SP_USE_QUICK_ALLOCATOR': 1,}
	env["CXXFLAGS"] = ['-Woverloaded-virtual', '-Wall']#, '-std=c++0x']
	env['LIBPATH'].append('/usr/local/lib')

	boost_lib_suffix = ARGUMENTS.get("boost-suffix", "")
	if not boost_lib_suffix:
		boost_lib_suffix = suffix_check(env)
    
	prefix = ARGUMENTS.get("prefix", ".")

	if ARGUMENTS.has_key("compiler"):
		env['CXX'] = ARGUMENTS["compiler"]
	elif os.getenv("CXX"):
		env['CXX'] = os.getenv("CXX")

	ret = compiler_check(env.get('CXX', ""))
	if ret:
		env['CXX'] = ret
	else:
		print "Can't find compiler. Exiting"
		Exit(1) 

	#tmp_env = chk_conf.Finish()

	checked_libs = []
	config = {'env': dict(filter(lambda _: _[1], env.items())), 
              'prefix': prefix, 
              'boost_lib_suffix': boost_lib_suffix,
              "checked_libs" : [],
              "checked_boost_ver" : False
              "checked_endian" : False
              }



tmp_env = Environment()
#tmp_env["CXX"] = config["env"]["CXX"]
for key, value in config['env'].items():
    if type(value) == type([]):
        tmp_env.Append(**{key: value})
    else:
        tmp_env[key] = value

chk_conf = Configure(tmp_env, custom_tests = {"boost_ver_check" : boost_ver_check})
if not config.get("checked_boost_ver", False) and not chk_conf.boost_ver_check():
	Exit(1)
config["checked_boost_ver"] = True

endian = conf.checkEndian() # look at AC_C_BIGENDIAN on this wiki
config["checked_endian"] = True
#if endian == "little":
#	
#elif endian == "big":
#	dict["PLATFORM_ENDIAN"] = "PLATFORM_BIG_ENDIAN"



if not lib_check(tmp_env, boost_lib(LIBS_USED), config["checked_libs"], chk_conf):
	Exit(1)
	
save_config(config)             



if "printconf" in COMMAND_LINE_TARGETS or "configure" in COMMAND_LINE_TARGETS:
	import pprint
	pprint.pprint(config)
	Exit(0)

targets = {
    "release":   Environment(
        CXXFLAGS = ["-O6"], 
        CPPDEFINES = {'DEBUG': 1, 'WITH_STOPPER': 1, 'NO_THRIFT':1}, 
        ),
    "debug":   Environment(
        CXXFLAGS = ["-O0", "-g", "-fkeep-inline-functions", "-fmerge-all-constants"], 
        CPPDEFINES = {'DEBUG': 1, 'WITH_STOPPER': 1, 'NO_THRIFT':1}, 
        ),
}

try:
    variants = ARGUMENTS["build"]
except KeyError:
    try:
        variants = config["build"]
    except KeyError:
        variants = "release"

if not config.get("build", "") == variants:
    config["build"] = variants
    save_config(config)

if "prefix" in ARGUMENTS:
    config["prefix"] = ARGUMENTS["prefix"]
else:
	config["prefix"] = "/usr/local/bin"
	
save_config(config)

if variants == 'all':
    variants = targets.keys()
else:
    variants = [x for x in variants.split(',') if x in targets]

path = os.getcwd()
for key in variants:
    dir = "." + key
    env = targets[key]
    
    for key, value in config['env'].items():
        if type(value) == type([]):
            env.Append(**{key: value})
        else:
        	if not env.has_key(key):
        		env[key] = ""
            env[key] += value

	#variant_dir = path + ("" if path[-1] == "/" else "/") + dir
	#if not os.path.exists(variant_dir):
	#	os.mkdir(variant_dir)
	#os.chdir(variant_dir)
	
	#print os.getcwd()
	
	env.Append(LIBS = boost_lib(LIBS_USED))
	VariantDir(dir, ".")
	cur_src_list = [dir + "/" + src for src in SRC_LIST]
	mp4frag = env.Program(dir + "/mp4frag", cur_src_list )
	env.Alias('install', config["prefix"])
	
	

	if len(variants) == 1 or (len(variants) > 1 and key == "release"):	
		env.Install(config["prefix"], mp4frag)
		
	print "DEFAULT_TARGETS is", map(str, DEFAULT_TARGETS)
	print "BUILD_TARGETS is", map(str, BUILD_TARGETS)
	
#	mp4env = env.Clone()
#	mp4env.Append(LIBS = boost_lib(LIBS_USED))
#	mp4frag = mp4env.Program('mp4frag', [ 'mp4frag.cc', 'mp4.cc', 'base64.cc' ] )


#	mp4env.Install(config["prefix"], mp4frag)
#	mp4env.Alias('install', config["prefix"])
